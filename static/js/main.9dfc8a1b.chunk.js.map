{"version":3,"sources":["user-item.js","user-actions.js","user-list.js","home.js","header.js","App.js","serviceWorker.js","index.js"],"names":["styles","StyleSheet","create","row","flexDirection","justifyContent","alignItems","padding","marginBottom","backgroundColor","borderBottomWidth","hairlineWidth","borderBottomColor","rowIcon","width","height","marginRight","borderRadius","boxShadow","rowData","flex","rowDataText","fontSize","textTransform","color","rowDataSubText","opacity","marginTop","UserItem","_ref","user","item","react_default","a","createElement","View","style","Image","source","picture","medium","Text","service","concat","name","title","first","last","phone","actionsContainer","actionButton","marginLeft","actionButtonDestructive","actionButtonText","textAlign","UserActions","props","console","log","TouchableHighlight","onPress","UserList","users","SwipeableFlatList","data","bounceFirstRowOnMount","maxSwipeDistance","renderItem","renderQuickActions","Home","state","loading","this","getUsers","results","setState","Object","toConsumableArray","ScrollView","noSpacer","noScroll","container","ActivityIndicator","centering","size","user_list","React","Component","headerContainer","header","paddingVertical","minHeight","headerCenter","order","headerLeft","headerRight","fontWeight","Header","onBack","SafeAreaView","accessibilityRole","aria-level","App","appContainer","home","AppRegistry","registerComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dfc8a1b.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, Image, Text, StyleSheet } from \"react-native\";\n\nconst UserItem = ({ item: user }) => {\n  return (\n    <View style={styles.row}>\n      <Image style={styles.rowIcon} source={user.picture.medium} />\n      <View style={styles.rowData}>\n\t  <Text style={styles.rowDataText}>{user.service}</Text>\n        <Text style={styles.rowDataText}>{`${user.name.title} ${\n          user.name.first\n        } ${user.name.last}`}</Text>\n        <Text style={styles.rowDataSubText}>{user.phone}</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: \"white\",\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: \"rgba(0,0,0,0.1)\"\n  },\n  rowIcon: {\n    width: 64,\n    height: 64,\n    marginRight: 20,\n    borderRadius: \"50%\",\n    boxShadow: \"0 1px 2px 0 rgba(0,0,0,0.1)\"\n  },\n  rowData: {\n    flex: 1\n  },\n  rowDataText: {\n    fontSize: 15,\n    textTransform: \"capitalize\",\n    color: \"#4b4b4b\"\n  },\n  rowDataSubText: {\n    fontSize: 13,\n    opacity: 0.8,\n    color: \"#a8a689\",\n    marginTop: 4\n  }\n});\n\nexport default UserItem;\n","import React from \"react\";\nimport {Linking} from 'react-native';\n\nimport {\n  View,\n  TouchableHighlight,\n  Text,\n  Alert,\n  StyleSheet\n} from \"react-native\";\n\nconst styles = StyleSheet.create({\n  actionsContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    padding: 10\n  },\n  actionButton: {\n    padding: 10,\n    color: \"white\",\n    borderRadius: 6,\n    width: 80,\n    backgroundColor: \"#808080\",\n    marginRight: 5,\n    marginLeft: 5\n  },\n  actionButtonDestructive: {\n    backgroundColor: \"#ff4b21\"\n  },\n  actionButtonText: {\n    textAlign: \"center\"\n  }\n});\n\nconst UserActions = (props) => {\n  console.log(props);\n  return (\n\t  <View style={styles.actionsContainer}>\n\t      <TouchableHighlight\n        \tstyle={[styles.actionButton, styles.actionButtonDestructive]}\n\t        onPress={() => {\n \t\n\t       }\n        }\n      >\n          <Text style={styles.actionButtonText}>call</Text>\n\n     \t\t </TouchableHighlight>\n</View>\n\n  );\n};\n\nexport default UserActions;\n","import React from \"react\";\nimport { SwipeableFlatList } from \"react-native\";\nimport UserItem from \"./user-item\";\nimport UserActions from \"./user-actions\";\n\nconst UserList = ({ users }) => {\n  return (\n    <SwipeableFlatList\n      data={users}\n      bounceFirstRowOnMount={true}\n      maxSwipeDistance={160}\n      renderItem={UserItem}\n      renderQuickActions={UserActions}\n    />\n  );\n};\n\nexport default UserList;\n","import React from \"react\";\nimport { ScrollView, StyleSheet, ActivityIndicator } from \"react-native\";\nimport UserList from \"./user-list\";\nimport * as data from \"./data.json\";\n\nclass Home extends React.Component {\n  state = {\n    users: [],\n    loading: true\n  };\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  async getUsers() {\n    const { results } = data;\n    this.setState({ users: [...results], loading: false });\n  }\n\n  render() {\n    return (\n      <ScrollView noSpacer={true} noScroll={true} style={styles.container}>\n        {this.state.loading ? (\n          <ActivityIndicator\n            style={[styles.centering]}\n            color=\"#ff8179\"\n            size=\"large\"\n          />\n        ) : (\n          <UserList users={this.state.users} />\n        )}\n      </ScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"whitesmoke\"\n  },\n  centering: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 8,\n    height: \"100vh\"\n  }\n});\n\nexport default Home;\n","import React from 'react';\nimport {SafeAreaView, View, Text, StyleSheet} from 'react-native';\n\nconst Header = ({ onBack, title }) => (\n  <SafeAreaView style={styles.headerContainer}>\n    <View style={styles.header}>\n      <View style={styles.headerCenter}>\n        <Text accessibilityRole=\"heading\" aria-level=\"3\" style={styles.title}>{title}</Text>\n      </View>\n    </View>\n  </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n  headerContainer: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: '#ff4e3f',\n    backgroundColor: '#ff8179',\n  },\n  header: {\n    padding: 10,\n    paddingVertical: 5,\n    alignItems: 'center',\n    flexDirection: 'row',\n    minHeight: 50\n  },\n  headerCenter: {\n    flex: 1,\n    order: 2\n  },\n  headerLeft: {\n    order: 1,\n    width: 80\n  },\n  headerRight: {\n    order: 3,\n    width: 80\n  },\n  title: {\n    fontSize: 19,\n    fontWeight: '600',\n    textAlign: 'center',\n    color: 'white'\n  },\n});\n\nexport default Header;","import React from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Home from './home';\nimport Header from './header';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <View style={styles.appContainer}>\n        <Header title=\"Arihant Details\" />\n        <Home />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appContainer: {\n    flex: 1,\n  },\n});\n\nAppRegistry.registerComponent('App', () => App);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}